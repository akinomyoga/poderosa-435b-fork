<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Common.OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Common.Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Common.MessageBoxTitle" xml:space="preserve">
    <value>Poderosa</value>
  </data>
  <data name="Message.GUtil.InternalError" xml:space="preserve">
    <value>An internal error occurred. Please check {0} file. 
{1}</value>
  </data>
  <data name="Message.CheckLogFileName.EmptyPath" xml:space="preserve">
    <value>The path is not specified.</value>
  </data>
  <data name="Message.CheckLogFileName.NotWritable" xml:space="preserve">
    <value>{0} is not writable.</value>
  </data>
  <data name="Message.CheckLogFileName.BadPathName" xml:space="preserve">
    <value>{0} is a incorrect path name.</value>
  </data>
  <data name="Message.CheckLogFileName.AlreadyExist" xml:space="preserve">
    <value>The file {0} already exists.</value>
  </data>
  <data name="Util.CheckLogFileName.Caption" xml:space="preserve">
    <value>Log file</value>
  </data>
  <data name="Util.CheckLogFileName.OverWrite" xml:space="preserve">
    <value>&amp;Overwrite</value>
  </data>
  <data name="Util.CheckLogFileName.Append" xml:space="preserve">
    <value>&amp;Append</value>
  </data>
  <data name="Util.CheckLogFileName.Cancel" xml:space="preserve">
    <value>&amp;Cancel</value>
  </data>
  <data name="Message.AbstractTerminal.UnsupportedCharSet" xml:space="preserve">
    <value>An unsupported character set {0} is detected. The screen may not be displayed correctly.</value>
  </data>
  <data name="Message.AbstractTerminal.UnexpectedChar" xml:space="preserve">
    <value>Failed to decode characters by the current encoding {0}. Please check the encode setting.</value>
  </data>
  <data name="Message.EscapesequenceTerminal.UnsupportedSequence" xml:space="preserve">
    <value>An unsupported escape sequence is detected.
</value>
  </data>
  <data name="Message.ConnectionCommandTarget.CloseError" xml:space="preserve">
    <value>An error occurred when closing the connection.</value>
  </data>
  <data name="Message.ConnectionCommandTarget.AreYouThereCondition" xml:space="preserve">
    <value>"Are You There" can be executed on Telnet connections only.</value>
  </data>
  <data name="Message.ConnectionCommandTarget.BreakCondition" xml:space="preserve">
    <value>"Send Break" can be executed to serial, Telnet, and SSH2 connections only.</value>
  </data>
  <data name="Message.ConnectionCommandTarget.SendError" xml:space="preserve">
    <value>Failed to transmit.</value>
  </data>
  <data name="Caption.ConnectionCommandTarget.DuringPaste" xml:space="preserve">
    <value>Pasting</value>
  </data>
  <data name="Message.TerminalControl.FailedToSend" xml:space="preserve">
    <value>Failed to transmit.</value>
  </data>
  <data name="Enum.WarningOption.Ignore" xml:space="preserve">
    <value>Ignore</value>
  </data>
  <data name="Enum.WarningOption.StatusBar" xml:space="preserve">
    <value>Display in status bar</value>
  </data>
  <data name="Enum.WarningOption.MessageBox" xml:space="preserve">
    <value>Display a message box</value>
  </data>
  <data name="Enum.DisconnectNotification.MessageBox" xml:space="preserve">
    <value>Display a message box</value>
  </data>
  <data name="Enum.DisconnectNotification.StatusBar" xml:space="preserve">
    <value>Display in status bar</value>
  </data>
  <data name="Enum.AltKeyAction.Menu" xml:space="preserve">
    <value>Menus and hortcuts</value>
  </data>
  <data name="Enum.AltKeyAction.ESC" xml:space="preserve">
    <value>ESC &lt;x&gt;</value>
  </data>
  <data name="Enum.AltKeyAction.Meta" xml:space="preserve">
    <value>Meta Key</value>
  </data>
  <data name="Enum.MouseButtonAction.None" xml:space="preserve">
    <value>Do Nothing</value>
  </data>
  <data name="Enum.MouseButtonAction.ContextMenu" xml:space="preserve">
    <value>Context menu</value>
  </data>
  <data name="Enum.MouseButtonAction.Paste" xml:space="preserve">
    <value>Paste</value>
  </data>
  <data name="Enum.KeyboardStyle.None" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Enum.KeyboardStyle.Default" xml:space="preserve">
    <value>Standard keyboard</value>
  </data>
  <data name="Enum.KeyboardStyle.Japanese" xml:space="preserve">
    <value>Japanese keyboard</value>
  </data>
  <data name="Enum.KeyboardStyle.Chinese" xml:space="preserve">
    <value>Chinese keyboard</value>
  </data>
  <data name="CommandCategory.Terminal" xml:space="preserve">
    <value>Terminal</value>
  </data>
  <data name="CommandCategory.TerminalEdit" xml:space="preserve">
    <value>Edit-Terminal</value>
  </data>
  <data name="Command.CopyAsLook" xml:space="preserve">
    <value>Copy As You Look</value>
  </data>
  <data name="Command.CopyToFile" xml:space="preserve">
    <value>Copy to file</value>
  </data>
  <data name="Command.PasteFromFile" xml:space="preserve">
    <value>Paste from file</value>
  </data>
  <data name="Command.ClearScreen" xml:space="preserve">
    <value>Clear screen</value>
  </data>
  <data name="Command.ClearBuffer" xml:space="preserve">
    <value>Clear buffer</value>
  </data>
  <data name="Command.SelectAll" xml:space="preserve">
    <value>Select All</value>
  </data>
  <data name="Command.ToggleLocalEcho" xml:space="preserve">
    <value>Toggle local echo</value>
  </data>
  <data name="Command.ToggleCharTriggerIntelliSense" xml:space="preserve">
    <value>Toggle shell complement by character input</value>
  </data>
  <data name="Command.ResetTerminal" xml:space="preserve">
    <value>Reset terminal</value>
  </data>
  <data name="Command.SendBreak" xml:space="preserve">
    <value>Send Break</value>
  </data>
  <data name="Command.AreYouThere" xml:space="preserve">
    <value>Send "Are You There"</value>
  </data>
  <data name="Command.ReceiveLineBreak" xml:space="preserve">
    <value>Line feed rule when recieving</value>
  </data>
  <data name="Command.IntelliSense" xml:space="preserve">
    <value>Shell complement</value>
  </data>
  <data name="Caption.SelectPasteFile" xml:space="preserve">
    <value>File to paste</value>
  </data>
  <data name="Menu.PopupCommandResult" xml:space="preserve">
    <value>&amp;Pop up command result</value>
  </data>
  <data name="Menu.CopyCommandResult" xml:space="preserve">
    <value>&amp;Copy command result</value>
  </data>
  <data name="Menu.Copy" xml:space="preserve">
    <value>&amp;Copy</value>
  </data>
  <data name="Menu.CopyAsLook" xml:space="preserve">
    <value>Copy As You &amp;Look</value>
  </data>
  <data name="Menu.CopyToFile" xml:space="preserve">
    <value>Copy &amp;to File...</value>
  </data>
  <data name="Menu.Paste" xml:space="preserve">
    <value>&amp;Paste</value>
  </data>
  <data name="Menu.PasteFromFile" xml:space="preserve">
    <value>Paste &amp;from file...</value>
  </data>
  <data name="Menu.ClearScreen" xml:space="preserve">
    <value>&amp;Clear screen</value>
  </data>
  <data name="Menu.ClearBuffer" xml:space="preserve">
    <value>Clear &amp;buffer</value>
  </data>
  <data name="Menu.SelectAll" xml:space="preserve">
    <value>Select &amp;All</value>
  </data>
  <data name="Menu.NewLine" xml:space="preserve">
    <value>&amp;Line feed transmission</value>
  </data>
  <data name="Menu.Encoding" xml:space="preserve">
    <value>&amp;Encoding</value>
  </data>
  <data name="Menu.LineFeedRule" xml:space="preserve">
    <value>Line &amp;feed rule while recieving...</value>
  </data>
  <data name="Menu.LocalEcho" xml:space="preserve">
    <value>Local ech&amp;o</value>
  </data>
  <data name="Menu.SendSpecial" xml:space="preserve">
    <value>&amp;Special</value>
  </data>
  <data name="Menu.SendBreak" xml:space="preserve">
    <value>Send &amp;Break</value>
  </data>
  <data name="Menu.AreYouThere" xml:space="preserve">
    <value>Send &amp;Are You There</value>
  </data>
  <data name="Menu.SerialConfig" xml:space="preserve">
    <value>Reconfigure &amp;serial port</value>
  </data>
  <data name="Menu.ResetTerminal" xml:space="preserve">
    <value>&amp;Reset terminal</value>
  </data>
  <data name="Menu.SuspendLog" xml:space="preserve">
    <value>S&amp;uspend log</value>
  </data>
  <data name="Menu.CommentLog" xml:space="preserve">
    <value>Comment to lo&amp;g...</value>
  </data>
  <data name="Menu.ChangeLog" xml:space="preserve">
    <value>Change &amp;log...</value>
  </data>
  <data name="Menu.ServerInfo" xml:space="preserve">
    <value>&amp;Host information...</value>
  </data>
  <data name="Menu.ToggleCharTriggerIntelliSense" xml:space="preserve">
    <value>S&amp;hell Complement by character input</value>
  </data>
  <data name="Menu.SelectIntelliSenseScheme" xml:space="preserve">
    <value>&amp;Shell scheme</value>
  </data>
  <data name="Menu.DocumentClose" xml:space="preserve">
    <value>&amp;Close</value>
  </data>
  <data name="Form.ToolBar._encodingLabel" xml:space="preserve">
    <value>Encoding</value>
  </data>
  <data name="Form.ToolBar._newLineLabel" xml:space="preserve">
    <value>Line feed</value>
  </data>
  <data name="Caption.CurrentShellScheme" xml:space="preserve">
    <value>Current shell scheme</value>
  </data>
  <data name="Enum.AuthType.Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Enum.AuthType.PublicKey" xml:space="preserve">
    <value>Public Key</value>
  </data>
  <data name="Enum.AuthType.KeyboardInteractive" xml:space="preserve">
    <value>Keyboard interactive</value>
  </data>
  <data name="Enum.EncodingType.ISO8859_1" xml:space="preserve">
    <value>iso-8859-1</value>
  </data>
  <data name="Enum.EncodingType.UTF8" xml:space="preserve">
    <value>utf-8</value>
  </data>
  <data name="Enum.EncodingType.EUC_JP" xml:space="preserve">
    <value>euc-jp</value>
  </data>
  <data name="Enum.EncodingType.SHIFT_JIS" xml:space="preserve">
    <value>shift-jis</value>
  </data>
  <data name="Enum.EncodingType.BIG5" xml:space="preserve">
    <value>big5</value>
  </data>
  <data name="Enum.EncodingType.EUC_CN" xml:space="preserve">
    <value>euc-cn</value>
  </data>
  <data name="Enum.EncodingType.EUC_KR" xml:space="preserve">
    <value>euc-kr</value>
  </data>
  <data name="Enum.EncodingType.GB2312" xml:space="preserve">
    <value>gb2312</value>
  </data>
  <data name="Enum.LogType.None" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Enum.LogType.Default" xml:space="preserve">
    <value>Standard</value>
  </data>
  <data name="Enum.LogType.Binary" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Enum.LogType.Xml" xml:space="preserve">
    <value>Debug</value>
  </data>
  <data name="Enum.NewLine.CR" xml:space="preserve">
    <value>CR</value>
  </data>
  <data name="Enum.NewLine.LF" xml:space="preserve">
    <value>LF</value>
  </data>
  <data name="Enum.NewLine.CRLF" xml:space="preserve">
    <value>CR+LF</value>
  </data>
  <data name="Enum.TerminalType.KTerm" xml:space="preserve">
    <value>kterm</value>
  </data>
  <data name="Enum.TerminalType.XTerm" xml:space="preserve">
    <value>xterm</value>
  </data>
  <data name="Enum.TerminalType.VT100" xml:space="preserve">
    <value>vt100</value>
  </data>
  <data name="Message.TCPTerminalParam.PropCannotBeSet" xml:space="preserve">
    <value>This property can not be changed.</value>
  </data>
  <data name="Mesage.SSHTerminalParam.MethodSetError" xml:space="preserve">
    <value>The method must be SSH1 or SSH2.</value>
  </data>
  <data name="Form.WarningWithDisableOption.Text" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="Form.WarningWithDisableOption._disableCheckBox" xml:space="preserve">
    <value>Do &amp;not display this message from next time</value>
  </data>
  <data name="Enum.TerminalType.Cygwin" xml:space="preserve">
    <value>cygwin</value>
  </data>
  <data name="Enum.TerminalType.Rosa" xml:space="preserve">
    <value>rosaterm</value>
  </data>
</root>